{"version":3,"sources":["components/TodoElement.js","ToDo.js","App.js","serviceWorker.js","index.js"],"names":["Row","styled","div","Text","props","isComplete","Button","button","Input","input","width","height","TodoElement","id","content","updateTodo","createAt","deleteTodo","useState","data","setData","_isComplete","_setisComplete","isEdit","setIsEdit","useEffect","console","log","value","onChange","e","target","onClick","role","Container","TitleBox","TitleElement","ToDo","TodoInput","useInput","todoList","setTodoList","_createTodo","ID","Date","now","newTodo","_updateTodo","updatedTodo","_deleteTodo","deletedtodoList","init","current","localStorage","getItem","JSON","parse","loadTodoList","setItem","stringify","onSubmit","preventDefault","setValue","placeholder","Object","values","map","idx","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d6ffb31.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Row = styled.div`\r\n  width: 80vw;\r\n  height: 10vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Text = styled.div`\r\n  ${props => (props.isComplete ? \"text-decoration: line-through;\" : null)}\r\n  margin: 0px 10px;\r\n  width: 30vw;\r\n  height: 50px;\r\n  border-radius: 50px;\r\n  background: #c0c0c0;\r\n  box-shadow: 10px 10px 20px #a3a3a3, -10px -10px 20px #dddddd;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: 300;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  all: unset;\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  background: #c0c0c0;\r\n  box-shadow: inset 10px 10px 20px #a3a3a3, inset -10px -10px 20px #dddddd;\r\n  margin: 0px 5px;\r\n`;\r\nconst Input = styled.input`\r\n  all: unset;\r\n  width: ${props => props.width};\r\n  height: ${props => props.height};\r\n  border-radius: 50px;\r\n  background: #c0c0c0;\r\n  box-shadow: inset 20px 20px 40px #a3a3a3, inset -20px -20px 40px #dddddd;\r\n  margin: 20px;\r\n`;\r\n\r\nconst TodoElement = ({\r\n  id,\r\n  content,\r\n  isComplete,\r\n  createAt,\r\n  updateTodo,\r\n  deleteTodo\r\n}) => {\r\n  const [data, setData] = useState(content);\r\n  const [_isComplete, _setisComplete] = useState(isComplete);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const _handleChange = e => {\r\n    setData(e.target.value);\r\n  };\r\n  const _EditEnd = e => {\r\n    setIsEdit(!isEdit);\r\n    updateTodo({ id, content: data });\r\n  };\r\n\r\n  const _handleisComplete = e => {\r\n    _setisComplete(!_isComplete);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(_isComplete);\r\n    updateTodo({ id, isComplete: _isComplete });\r\n  }, [_isComplete]);\r\n\r\n  return (\r\n    <Row>\r\n      {isEdit ? (\r\n        <>\r\n          <Input\r\n            width=\"30vw\"\r\n            height=\"50px\"\r\n            value={data}\r\n            onChange={_handleChange}\r\n          ></Input>\r\n          <Button onClick={() => _EditEnd()}>\r\n            <span role=\"img\">✅</span>\r\n          </Button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Button onClick={() => _handleisComplete()}>\r\n            <span role=\"img\">⭕</span>\r\n          </Button>\r\n          <Text isComplete={_isComplete}>{data}</Text>\r\n          <Button onClick={() => setIsEdit(!isEdit)}>\r\n            <span role=\"img\">🛠</span>\r\n          </Button>\r\n          <Button onClick={() => deleteTodo(id)}>\r\n            <span role=\"img\">❌</span>\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default TodoElement;\r\n/**\r\n *\r\n * 완료버튼 => 보고\r\n * 수정버튼 => Input로 변환(content변수를 여기서 복사해 또 관리) -> 완료시 -> 보고\r\n * 삭제버튼 => 보고\r\n */\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TodoElement from \"./components/TodoElement\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #c0c0c0;\r\n  align-items: center;\r\n  padding: 30px;\r\n`;\r\n\r\nconst TitleBox = styled.div`\r\n  width: ${props => props.width};\r\n  height: ${props => props.height};\r\n  border-radius: 50px;\r\n  background: #c0c0c0;\r\n  box-shadow: inset 31px 31px 63px #a3a3a3, inset -31px -31px 63px #dddddd;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n`;\r\n\r\nconst TitleElement = styled.div`\r\n  width: ${props => props.width};\r\n  height: ${props => props.height};\r\n  border-radius: 50%;\r\n  background: linear-gradient(145deg, #cdcdcd, #adadad);\r\n  box-shadow: 10px 10px 20px #a3a3a3, -10px -10px 20px #dddddd;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 36px;\r\n  font-weight: 300;\r\n  transition: all 0.5s ease-in-out;\r\n  &:hover {\r\n    opacity: 0.6;\r\n    border-radius: 50px;\r\n    background: linear-gradient(145deg, #adadad, #cdcdcd);\r\n    box-shadow: 10px 10px 20px #a3a3a3, -10px -10px 20px #dddddd;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  width: ${props => props.width};\r\n  height: ${props => props.height};\r\n  border-radius: 50px;\r\n  background: #c0c0c0;\r\n  box-shadow: inset 20px 20px 40px #a3a3a3, inset -20px -20px 40px #dddddd;\r\n  margin: 20px;\r\n`;\r\n\r\nconst ToDo = () => {\r\n  const TodoInput = useInput();\r\n  const [todoList, setTodoList] = useState({});\r\n  const _submit = e => {\r\n    e.preventDefault();\r\n    _createTodo(TodoInput.value);\r\n    TodoInput.setValue(\"\");\r\n  };\r\n  const _createTodo = content => {\r\n    const ID = Date.now();\r\n    const newTodo = {\r\n      [ID]: { id: ID, content: content, isComplete: false, createAt: ID }\r\n    };\r\n    setTodoList({ ...todoList, ...newTodo });\r\n  };\r\n  const _updateTodo = ({ id, content = null, isComplete = null }) => {\r\n    let updatedTodo = todoList;\r\n    if (content !== null) {\r\n      updatedTodo[id].content = content;\r\n    }\r\n    if (isComplete !== null) {\r\n      updatedTodo[id].isComplete = isComplete;\r\n    }\r\n    setTodoList({ ...todoList, ...updatedTodo });\r\n  };\r\n\r\n  const _deleteTodo = id => {\r\n    const deletedtodoList = todoList;\r\n    delete deletedtodoList[id];\r\n    setTodoList({ ...deletedtodoList });\r\n  };\r\n\r\n  const loadTodoList = () => {\r\n    const current = localStorage.getItem(\"TODOLIST\");\r\n    if (current !== null) {\r\n      setTodoList(JSON.parse(current));\r\n    }\r\n  };\r\n\r\n  const init = () => {\r\n    loadTodoList();\r\n  };\r\n\r\n  useEffect(() => {\r\n    init();\r\n    return () => {};\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"TODOLIST\", JSON.stringify(todoList));\r\n  }, [todoList]);\r\n\r\n  return (\r\n    <Container>\r\n      <TitleBox width=\"50vw\" height=\"20vh\">\r\n        <TitleElement width=\"100px\" height=\"100px\">\r\n          TO\r\n        </TitleElement>\r\n        <TitleElement width=\"100px\" height=\"100px\">\r\n          Do\r\n        </TitleElement>\r\n        <TitleElement width=\"100px\" height=\"100px\">\r\n          LIST\r\n        </TitleElement>\r\n      </TitleBox>\r\n      <form onSubmit={_submit}>\r\n        <Input\r\n          width=\"80vw\"\r\n          height=\"100px\"\r\n          value={TodoInput.value}\r\n          onChange={TodoInput.onChange}\r\n          placeholder=\"add to do\"\r\n        ></Input>\r\n      </form>\r\n      <div>\r\n        {todoList\r\n          ? Object.values(todoList).map((e, idx) => (\r\n              <TodoElement\r\n                key={idx}\r\n                id={e.id}\r\n                content={e.content}\r\n                isComplete={e.isComplete}\r\n                createAt={e.createAt}\r\n                updateTodo={_updateTodo}\r\n                deleteTodo={_deleteTodo}\r\n              />\r\n            ))\r\n          : null}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n/**\r\n * input으로 todolist 만들수 있다,\r\n *\r\n */\r\n\r\nconst useInput = () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const onChange = e => {\r\n    if (e.target.value !== null) {\r\n      setValue(e.target.value);\r\n    }\r\n  };\r\n  return { value, onChange, setValue };\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ToDo from \"./ToDo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}